
#include "Nucleus.h"
#include "GaussianElimination.h"
#include <random>

#include "Matrix_CycleRowPartition.h"
#include "Vector_CyclePartition.h"

TEST(GaussianElimination, cycle_partition){
    LinearAlgebra init;
    Matrix_CycleRowPartition A(23, 23, init);
    Vector_CyclePartition x(23, init);
    std::unique_ptr<AbstractVector> b = std::make_unique<Vector_CyclePartition>(23, init);

    // std::vector<std::vector<double>> m_vals = {{1.1, 2.3, 3.1, 0.042, 5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 7.2, 3.1, 0.042, 5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027, 0.027, 0.032, 6.3, 8.2, 3.6, 0.027, 0.032, 6.3, 8.2, 3.6},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 0.052, 2.3, 3.1, 2.3, 3.1, 0.042, 5.1, 0.027, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027},
    //                                            {5.1, 0.027, 0.027, 0.032, 2.3, 3.1, 0.042, 5.1, 6.3, 0.042, 0.032, 6.3, 8.2, 3.6, 4.3, 8.2, 3.6, 4.3, 0.052, 5.1, 0.027, 0.032, 6.3},
    //                                            {4.3, 0.027, 0.032, 6.3, 8.2, 0.052, 2.3, 0.027, 0.032, 2.3, 3.1, 0.042, 5.1, 3.1, 4.3, 0.052, 2.3, 3.1, 0.042, 0.042, 5.1, 0.027, 0.027},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027, 0.027, 0.032, 6.3, 8.2, 3.6, 0.027, 0.032, 6.3, 8.2, 3.6},
    //                                            {1.1, 2.3, 3.1, 0.042, 5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 7.2, 3.1, 0.042, 5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 0.052, 2.3, 3.1, 2.3, 3.1, 0.042, 5.1, 0.027, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027, 0.027, 0.032, 6.3, 8.2, 3.6, 0.027, 0.032, 6.3, 8.2, 3.6},
    //                                            {3.1, 4.3, 8.2, 3.6, 4.3, 0.052, 2.3, 3.6, 3.1, 4.3, 0.052, 7.2, 3.1, 0.042, 5.1, 0.052, 4.3, 0.052, 7.2, 3.1, 0.042, 2.3, 3.1},
    //                                            {4.3, 0.027, 0.032, 6.3, 8.2, 0.052, 2.3, 0.027, 0.032, 2.3, 3.1, 0.042, 5.1, 3.1, 4.3, 0.052, 2.3, 3.1, 0.042, 0.042, 5.1, 0.027, 0.027},
    //                                            {1.1, 2.3, 3.1, 0.042, 5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 7.2, 3.1, 0.042, 5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027, 0.027, 0.032, 6.3, 8.2, 3.6, 0.027, 0.032, 6.3, 8.2, 3.6},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 0.052, 2.3, 3.1, 2.3, 3.1, 0.042, 5.1, 0.027, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027},
    //                                            {5.1, 0.027, 0.027, 0.032, 2.3, 3.1, 0.042, 5.1, 6.3, 0.042, 0.032, 6.3, 8.2, 3.6, 4.3, 8.2, 3.6, 4.3, 0.052, 5.1, 0.027, 0.032, 6.3},
    //                                            {4.3, 0.027, 0.032, 6.3, 8.2, 0.052, 2.3, 0.027, 0.032, 2.3, 3.1, 0.042, 5.1, 3.1, 4.3, 0.052, 2.3, 3.1, 0.042, 0.042, 5.1, 0.027, 0.027},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027, 0.027, 0.032, 6.3, 8.2, 3.6, 0.027, 0.032, 6.3, 8.2, 3.6},
    //                                            {1.1, 2.3, 3.1, 0.042, 5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 7.2, 3.1, 0.042, 5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 0.052, 2.3, 3.1, 2.3, 3.1, 0.042, 5.1, 0.027, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027, 0.027, 0.032, 6.3, 8.2, 3.6, 0.027, 0.032, 6.3, 8.2, 3.6},
    //                                            {3.1, 4.3, 8.2, 3.6, 4.3, 0.052, 2.3, 3.6, 3.1, 4.3, 0.052, 7.2, 3.1, 0.042, 5.1, 0.052, 4.3, 0.052, 7.2, 3.1, 0.042, 2.3, 3.1},
    //                                            {4.3, 0.027, 0.032, 6.3, 8.2, 0.052, 2.3, 0.027, 0.032, 2.3, 3.1, 0.042, 5.1, 3.1, 4.3, 0.052, 2.3, 3.1, 0.042, 0.042, 5.1, 0.027, 0.027},
    //                                            {5.1, 0.027, 0.032, 6.3, 8.2, 3.6, 4.3, 0.052, 2.3, 3.1, 0.042, 5.1, 0.027, 0.027, 0.032, 6.3, 8.2, 3.6, 0.027, 0.032, 6.3, 8.2, 3.6}};
    // std::vector<double> v_vals = {5.1, 0.027, 0.027, 0.032, 2.3, 3.1, 5.1, 0.027, 0.032, 2.3, 3.1, 0.027, 0.027, 0.032, 2.3, 0.027, 0.032, 2.3, 3.1, 5.1, 0.027, 2.3, 3.1};

    std::default_random_engine generator;
    std::uniform_real_distribution<double> distribution(0.0, 10.0);

    std::vector<std::vector<double>> m_vals(23, std::vector<double>(23));
    std::vector<double> v_vals(23);
    for (unsigned int i = 0; i < m_vals.size(); i++){
        for (unsigned int j = 0; j < m_vals.size(); j++)
            m_vals[i][j] = distribution(generator);
        v_vals[i] = distribution(generator);
    }

    A.setValues(m_vals);
    x.setValues(v_vals);

    b = A.mult(x);

    GaussianElimination solver(init);
    std::unique_ptr<AbstractVector> result = solver.solve(A, *b);

    double diff = (x.add(*b))->l2norm();
    EXPECT_DOUBLE_EQ(diff, 0.0);
}
